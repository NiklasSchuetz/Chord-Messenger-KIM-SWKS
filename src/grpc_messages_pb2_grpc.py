# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_messages_pb2 as grpc__messages__pb2


class grpc_serviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/grpc_service/Chat',
                request_serializer=grpc__messages__pb2.ChatMsg.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.SetPredecessor = channel.unary_unary(
                '/grpc_service/SetPredecessor',
                request_serializer=grpc__messages__pb2.SetPredecessorRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.SetSuccessor = channel.unary_unary(
                '/grpc_service/SetSuccessor',
                request_serializer=grpc__messages__pb2.SetSuccessorRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.PreSuc = channel.unary_unary(
                '/grpc_service/PreSuc',
                request_serializer=grpc__messages__pb2.PSreq.SerializeToString,
                response_deserializer=grpc__messages__pb2.PSres.FromString,
                )
        self.FindUser = channel.unary_unary(
                '/grpc_service/FindUser',
                request_serializer=grpc__messages__pb2.FindRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.User.FromString,
                )
        self.SaveUser = channel.unary_unary(
                '/grpc_service/SaveUser',
                request_serializer=grpc__messages__pb2.User.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.AddChatpartner = channel.unary_unary(
                '/grpc_service/AddChatpartner',
                request_serializer=grpc__messages__pb2.AddChatPartner.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.FindChatPartners = channel.unary_unary(
                '/grpc_service/FindChatPartners',
                request_serializer=grpc__messages__pb2.FindRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.FindReply.FromString,
                )
        self.FindMessage = channel.unary_unary(
                '/grpc_service/FindMessage',
                request_serializer=grpc__messages__pb2.FindRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.Message.FromString,
                )
        self.SaveMessage = channel.unary_unary(
                '/grpc_service/SaveMessage',
                request_serializer=grpc__messages__pb2.Message.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.AddMessageToChat = channel.unary_unary(
                '/grpc_service/AddMessageToChat',
                request_serializer=grpc__messages__pb2.AddMessage.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.FindMessagesFromChat = channel.unary_unary(
                '/grpc_service/FindMessagesFromChat',
                request_serializer=grpc__messages__pb2.FindRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.FindReply.FromString,
                )
        self.FindKey = channel.unary_unary(
                '/grpc_service/FindKey',
                request_serializer=grpc__messages__pb2.FindRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.Key.FromString,
                )
        self.SaveKey = channel.unary_unary(
                '/grpc_service/SaveKey',
                request_serializer=grpc__messages__pb2.Key.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.addToKeyChain = channel.unary_unary(
                '/grpc_service/addToKeyChain',
                request_serializer=grpc__messages__pb2.AddKeyChain.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.FindKeyChain = channel.unary_unary(
                '/grpc_service/FindKeyChain',
                request_serializer=grpc__messages__pb2.FindRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.FindReply.FromString,
                )
        self.Join = channel.unary_unary(
                '/grpc_service/Join',
                request_serializer=grpc__messages__pb2.JoinRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.JoinReply.FromString,
                )
        self.ListAsReady = channel.unary_unary(
                '/grpc_service/ListAsReady',
                request_serializer=grpc__messages__pb2.ListAsReadyRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.ListAsReadyReply.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/grpc_service/SendMessage',
                request_serializer=grpc__messages__pb2.SendMessageUI.SerializeToString,
                response_deserializer=grpc__messages__pb2.SendMessageUIReply.FromString,
                )
        self.StartChat = channel.unary_unary(
                '/grpc_service/StartChat',
                request_serializer=grpc__messages__pb2.StartChatRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.StartChatReply.FromString,
                )
        self.Fingertable = channel.unary_unary(
                '/grpc_service/Fingertable',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.Empty.FromString,
                )
        self.StartJoin = channel.unary_unary(
                '/grpc_service/StartJoin',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.SetChordIds = channel.unary_unary(
                '/grpc_service/SetChordIds',
                request_serializer=grpc__messages__pb2.NewChordIDs.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.getMessages = channel.unary_unary(
                '/grpc_service/getMessages',
                request_serializer=grpc__messages__pb2.User.SerializeToString,
                response_deserializer=grpc__messages__pb2.MessagesWrapper.FromString,
                )
        self.getChatpartner = channel.unary_unary(
                '/grpc_service/getChatpartner',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.UserChordIdList.FromString,
                )
        self.StartGetChatPartners = channel.unary_unary(
                '/grpc_service/StartGetChatPartners',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.FindReply.FromString,
                )
        self.StartGetAllMessages = channel.unary_unary(
                '/grpc_service/StartGetAllMessages',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.Register = channel.unary_unary(
                '/grpc_service/Register',
                request_serializer=grpc__messages__pb2.RegisterNode.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.StartRegister = channel.unary_unary(
                '/grpc_service/StartRegister',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.LoginNewNode = channel.unary_unary(
                '/grpc_service/LoginNewNode',
                request_serializer=grpc__messages__pb2.LogInToNewNodeRequest.SerializeToString,
                response_deserializer=grpc__messages__pb2.User.FromString,
                )
        self.RetrieveKeys = channel.unary_unary(
                '/grpc_service/RetrieveKeys',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.Logout = channel.unary_unary(
                '/grpc_service/Logout',
                request_serializer=grpc__messages__pb2.Empty.SerializeToString,
                response_deserializer=grpc__messages__pb2.Empty.FromString,
                )
        self.createAssymetricKeys = channel.unary_unary(
                '/grpc_service/createAssymetricKeys',
                request_serializer=grpc__messages__pb2.PubPrivKey.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )
        self.shareSymmetricKey = channel.unary_unary(
                '/grpc_service/shareSymmetricKey',
                request_serializer=grpc__messages__pb2.SymmetricKey.SerializeToString,
                response_deserializer=grpc__messages__pb2.Reply.FromString,
                )


class grpc_serviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Chord/Messenger rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PreSuc(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindUser(self, request, context):
        """
        STORAGE


        User
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddChatpartner(self, request, context):
        """ChatPartner
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindChatPartners(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMessage(self, request, context):
        """Message
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMessageToChat(self, request, context):
        """Chat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMessagesFromChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindKey(self, request, context):
        """Key
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addToKeyChain(self, request, context):
        """KeyChain
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindKeyChain(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Join(self, request, context):
        """READY AND JOIN
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAsReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """UI rpc
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fingertable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartJoin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetChordIds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getChatpartner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGetChatPartners(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartGetAllMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Register(self, request, context):
        """BOOTSTRAP
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoginNewNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RetrieveKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createAssymetricKeys(self, request, context):
        """ENCRYPTION
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shareSymmetricKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_grpc_serviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=grpc__messages__pb2.ChatMsg.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'SetPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPredecessor,
                    request_deserializer=grpc__messages__pb2.SetPredecessorRequest.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'SetSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSuccessor,
                    request_deserializer=grpc__messages__pb2.SetSuccessorRequest.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'PreSuc': grpc.unary_unary_rpc_method_handler(
                    servicer.PreSuc,
                    request_deserializer=grpc__messages__pb2.PSreq.FromString,
                    response_serializer=grpc__messages__pb2.PSres.SerializeToString,
            ),
            'FindUser': grpc.unary_unary_rpc_method_handler(
                    servicer.FindUser,
                    request_deserializer=grpc__messages__pb2.FindRequest.FromString,
                    response_serializer=grpc__messages__pb2.User.SerializeToString,
            ),
            'SaveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveUser,
                    request_deserializer=grpc__messages__pb2.User.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'AddChatpartner': grpc.unary_unary_rpc_method_handler(
                    servicer.AddChatpartner,
                    request_deserializer=grpc__messages__pb2.AddChatPartner.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'FindChatPartners': grpc.unary_unary_rpc_method_handler(
                    servicer.FindChatPartners,
                    request_deserializer=grpc__messages__pb2.FindRequest.FromString,
                    response_serializer=grpc__messages__pb2.FindReply.SerializeToString,
            ),
            'FindMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMessage,
                    request_deserializer=grpc__messages__pb2.FindRequest.FromString,
                    response_serializer=grpc__messages__pb2.Message.SerializeToString,
            ),
            'SaveMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveMessage,
                    request_deserializer=grpc__messages__pb2.Message.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'AddMessageToChat': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMessageToChat,
                    request_deserializer=grpc__messages__pb2.AddMessage.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'FindMessagesFromChat': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMessagesFromChat,
                    request_deserializer=grpc__messages__pb2.FindRequest.FromString,
                    response_serializer=grpc__messages__pb2.FindReply.SerializeToString,
            ),
            'FindKey': grpc.unary_unary_rpc_method_handler(
                    servicer.FindKey,
                    request_deserializer=grpc__messages__pb2.FindRequest.FromString,
                    response_serializer=grpc__messages__pb2.Key.SerializeToString,
            ),
            'SaveKey': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveKey,
                    request_deserializer=grpc__messages__pb2.Key.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'addToKeyChain': grpc.unary_unary_rpc_method_handler(
                    servicer.addToKeyChain,
                    request_deserializer=grpc__messages__pb2.AddKeyChain.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'FindKeyChain': grpc.unary_unary_rpc_method_handler(
                    servicer.FindKeyChain,
                    request_deserializer=grpc__messages__pb2.FindRequest.FromString,
                    response_serializer=grpc__messages__pb2.FindReply.SerializeToString,
            ),
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=grpc__messages__pb2.JoinRequest.FromString,
                    response_serializer=grpc__messages__pb2.JoinReply.SerializeToString,
            ),
            'ListAsReady': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAsReady,
                    request_deserializer=grpc__messages__pb2.ListAsReadyRequest.FromString,
                    response_serializer=grpc__messages__pb2.ListAsReadyReply.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=grpc__messages__pb2.SendMessageUI.FromString,
                    response_serializer=grpc__messages__pb2.SendMessageUIReply.SerializeToString,
            ),
            'StartChat': grpc.unary_unary_rpc_method_handler(
                    servicer.StartChat,
                    request_deserializer=grpc__messages__pb2.StartChatRequest.FromString,
                    response_serializer=grpc__messages__pb2.StartChatReply.SerializeToString,
            ),
            'Fingertable': grpc.unary_unary_rpc_method_handler(
                    servicer.Fingertable,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.Empty.SerializeToString,
            ),
            'StartJoin': grpc.unary_unary_rpc_method_handler(
                    servicer.StartJoin,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'SetChordIds': grpc.unary_unary_rpc_method_handler(
                    servicer.SetChordIds,
                    request_deserializer=grpc__messages__pb2.NewChordIDs.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'getMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.getMessages,
                    request_deserializer=grpc__messages__pb2.User.FromString,
                    response_serializer=grpc__messages__pb2.MessagesWrapper.SerializeToString,
            ),
            'getChatpartner': grpc.unary_unary_rpc_method_handler(
                    servicer.getChatpartner,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.UserChordIdList.SerializeToString,
            ),
            'StartGetChatPartners': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGetChatPartners,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.FindReply.SerializeToString,
            ),
            'StartGetAllMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGetAllMessages,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=grpc__messages__pb2.RegisterNode.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'StartRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRegister,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'LoginNewNode': grpc.unary_unary_rpc_method_handler(
                    servicer.LoginNewNode,
                    request_deserializer=grpc__messages__pb2.LogInToNewNodeRequest.FromString,
                    response_serializer=grpc__messages__pb2.User.SerializeToString,
            ),
            'RetrieveKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.RetrieveKeys,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=grpc__messages__pb2.Empty.FromString,
                    response_serializer=grpc__messages__pb2.Empty.SerializeToString,
            ),
            'createAssymetricKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.createAssymetricKeys,
                    request_deserializer=grpc__messages__pb2.PubPrivKey.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
            'shareSymmetricKey': grpc.unary_unary_rpc_method_handler(
                    servicer.shareSymmetricKey,
                    request_deserializer=grpc__messages__pb2.SymmetricKey.FromString,
                    response_serializer=grpc__messages__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc_service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class grpc_service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/Chat',
            grpc__messages__pb2.ChatMsg.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SetPredecessor',
            grpc__messages__pb2.SetPredecessorRequest.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SetSuccessor',
            grpc__messages__pb2.SetSuccessorRequest.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PreSuc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/PreSuc',
            grpc__messages__pb2.PSreq.SerializeToString,
            grpc__messages__pb2.PSres.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/FindUser',
            grpc__messages__pb2.FindRequest.SerializeToString,
            grpc__messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SaveUser',
            grpc__messages__pb2.User.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddChatpartner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/AddChatpartner',
            grpc__messages__pb2.AddChatPartner.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindChatPartners(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/FindChatPartners',
            grpc__messages__pb2.FindRequest.SerializeToString,
            grpc__messages__pb2.FindReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/FindMessage',
            grpc__messages__pb2.FindRequest.SerializeToString,
            grpc__messages__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SaveMessage',
            grpc__messages__pb2.Message.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddMessageToChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/AddMessageToChat',
            grpc__messages__pb2.AddMessage.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMessagesFromChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/FindMessagesFromChat',
            grpc__messages__pb2.FindRequest.SerializeToString,
            grpc__messages__pb2.FindReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/FindKey',
            grpc__messages__pb2.FindRequest.SerializeToString,
            grpc__messages__pb2.Key.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SaveKey',
            grpc__messages__pb2.Key.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addToKeyChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/addToKeyChain',
            grpc__messages__pb2.AddKeyChain.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindKeyChain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/FindKeyChain',
            grpc__messages__pb2.FindRequest.SerializeToString,
            grpc__messages__pb2.FindReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/Join',
            grpc__messages__pb2.JoinRequest.SerializeToString,
            grpc__messages__pb2.JoinReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAsReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/ListAsReady',
            grpc__messages__pb2.ListAsReadyRequest.SerializeToString,
            grpc__messages__pb2.ListAsReadyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SendMessage',
            grpc__messages__pb2.SendMessageUI.SerializeToString,
            grpc__messages__pb2.SendMessageUIReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/StartChat',
            grpc__messages__pb2.StartChatRequest.SerializeToString,
            grpc__messages__pb2.StartChatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fingertable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/Fingertable',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartJoin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/StartJoin',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetChordIds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/SetChordIds',
            grpc__messages__pb2.NewChordIDs.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/getMessages',
            grpc__messages__pb2.User.SerializeToString,
            grpc__messages__pb2.MessagesWrapper.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getChatpartner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/getChatpartner',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.UserChordIdList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartGetChatPartners(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/StartGetChatPartners',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.FindReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartGetAllMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/StartGetAllMessages',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/Register',
            grpc__messages__pb2.RegisterNode.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/StartRegister',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoginNewNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/LoginNewNode',
            grpc__messages__pb2.LogInToNewNodeRequest.SerializeToString,
            grpc__messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RetrieveKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/RetrieveKeys',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/Logout',
            grpc__messages__pb2.Empty.SerializeToString,
            grpc__messages__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createAssymetricKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/createAssymetricKeys',
            grpc__messages__pb2.PubPrivKey.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def shareSymmetricKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc_service/shareSymmetricKey',
            grpc__messages__pb2.SymmetricKey.SerializeToString,
            grpc__messages__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
